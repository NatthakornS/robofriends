{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","alt","src","CardList","robots","cardComponents","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","App","useState","robot","setRobot","setSearchfield","searchResults","setSearchResults","useEffect","fetch","then","res","json","users","results","filter","toLowerCase","includes","console","log","event","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iOAgBeA,MAdf,SAAcC,GAAQ,IACVC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACrB,OACI,yBAAKC,UAAU,uDAEX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACI,4BAAKF,GACL,2BAAIC,MCOLK,MAbf,YAA6B,IAAVC,EAAS,EAATA,OACTC,EAAiBD,EAAOE,KAAI,SAACC,EAAMC,GACrC,OACI,kBAAC,EAAD,CAAMC,IAAOD,EAAGT,GAAIK,EAAOI,GAAGT,GAAIF,KAAMO,EAAOI,GAAGX,KAAMC,MAAOM,EAAOI,GAAGV,WAGjF,OACI,6BACKO,ICQEK,MAbf,YAAgD,EAA5BC,YAA6B,IAAhBC,EAAe,EAAfA,aAC7B,OACI,6BACI,2BACIZ,UAAU,WACVa,KAAK,SACLC,YAAY,gBACZC,SAAUH,M,MCHXI,MATf,SAAgBpB,GACZ,OACI,yBAAKqB,MAAS,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAO,UAChExB,EAAMyB,WCmFJC,MAlDf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACJC,EADI,KACGC,EADH,OAE2BF,mBAAS,IAFpC,mBAEJZ,EAFI,KAESe,EAFT,OAG+BH,mBAAS,IAHxC,mBAGJI,EAHI,KAGWC,EAHX,KAoCX,OA3BAC,qBAAU,WACNC,MAAM,8CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACG,SAACG,GACGT,EAASS,SAMzBL,qBAAU,WACN,IAAMM,EAAUX,EAAMY,QAAO,SAAAZ,GACzB,OAAOA,EAAM3B,KAAKwC,cAAcC,SAAS3B,EAAY0B,kBAEzDT,EAAiBO,GAOjBI,QAAQC,IAAIL,EAAQR,KACrB,CAAChB,IAKA,yBAAKX,UAAU,MACX,wBAAIA,UAAU,SAAd,iBACA,kBAAC,EAAD,CAAWY,aAlCI,SAAA6B,GACnBf,EAAee,EAAMC,OAAOC,UAkCxB,kBAAC,EAAD,KACI,kBAAC,EAAD,CACIvC,OAAQuB,OCpERiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCTNC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.e1b624e8.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Card(props) {\n    const { name, email, id} = props;\n    return(\n        <div className='tc bg-light-green dib br3 pa2 ma2 grow bw2 shadow-5'>\n            {/* <h1>Robofriens</h1> */}\n            <img alt='robots' src={`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nfunction CardList({robots}) {\n    const cardComponents = robots.map((user, i) => {\n        return (\n            <Card key = {i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n        )\n    }) \n    return (\n        <div>\n            {cardComponents}\n        </div>\n    )\n}\n\nexport default CardList;","import React from 'react';\n\n// const state = {\n//     robots: robot,\n//     searchfield: ''\n// };\n\nfunction SearchBox({searchfield, searchChange}) {\n    return (\n        <div>\n            <input \n                className='pa2 bg-b'\n                type='search'\n                placeholder='Search robots'\n                onChange={searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from 'react';\n\nfunction Scroll(props) {\n    return (\n        <div style = {{overflow: 'scroll', border: \"5px solid black\", height:'800px'}}>\n            {props.children}\n        </div>\n    )\n\n}\n\nexport default Scroll;","import React,{ useState, useEffect } from 'react';\nimport CardList from './CardList';\n// import {robots} from './robots';\nimport SearchBox from './SearchBox';\nimport './App.css';\nimport Scroll from './Scroll';\n\n\n// class App extends Component {\n//     constructor() {\n//         super()\n//         this.state = {\n//             robots: robots,\n//             searchfield: ''\n//         }\n//     }\n    \n//     onSearchChange = (event) => {\n//         this.setState({ searchfield: event.target.value })\n//     }\n\n//     render() {\n//         const filteredRobots = this.state.robots.filter(robots => {\n//             return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n//         })\n\n//         return (\n//             <div className='tc'>\n//                 <h1>Robofriends</h1>\n//                 <SearchBox searchChange={this.onSearchChange}/>\n//                 <CardList robots={filteredRobots}/>\n//             </div>\n//         )\n//     }\n\n// }\n\n\nfunction App() {\n    const [robot, setRobot] = useState([]);\n    const [searchfield, setSearchfield] = useState('');\n    const [searchResults, setSearchResults] = useState([]);\n    \n    const onSearchChange = event => {\n        setSearchfield(event.target.value);\n    };\n\n    useEffect(() => {\n        fetch(\"https://jsonplaceholder.typicode.com/users\")\n            .then(res => res.json())\n            .then(\n                (users) => {\n                    setRobot(users);\n                    // setSearchResults(users);\n\n                })\n    });\n   \n    useEffect(() => {\n        const results = robot.filter(robot => {\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n        });\n        setSearchResults(results);\n        // if(results.lenght > 0 ){\n        //     setSearchResults(results);\n        // }\n        // else{\n        //     setSearchResults(robot);\n        // }\n        console.log(results,searchResults)\n    }, [searchfield]);\n\n\n\n    return (\n        <div className='tc'>\n            <h1 className='tc f1'>Hello friends</h1>\n            <SearchBox searchChange={onSearchChange}/>\n            <Scroll>\n                <CardList \n                    robots={searchResults}\n                />\n            </Scroll>\n        </div>\n    )\n}\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport {robots} from './robots';\n\n\nReactDOM.render(\n  <App/>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}